% Based on loadXML from the Labelme Toolbox, except that we allow
% non-sibling tags to have the same name.
%
% This interface can read tag attributes.  Repeated tags need not have the
% same structure.
%
% Note: this interface ignores text values that are siblings of other 
% tags.
% Example: In <example><a>dontIgnoreMe</a>ignoreMe</example>, ignoreMe 
% will be ignored because ignoreMe is a sibling of <a>.  So make sure that 
% your text values are wrapped in their own tags.
%
% The structure generated by this function can be written back to an XML 
% file with the Labelme Toolbox's writeXML function.  Note: writeXML will 
% store attribute fields as tags with text values.
%
% It is probably not a good idea to try parsing xhtml with this function.
% This interface was designed to parse Labelme database elements.
%
% Author: Joe Rollo
%
% Some code was taken from the Labelme toolbox xml functions.
%
% Input: a path to an xml file.
%
% Output: 
% -v a structure containing xml data.
% -xml a string containing the raw xml.


function [v, xml] = load_xml(filename)
%
% Reads a XML file and produces a struct array.
%
% filename = name of the XML file
% v = struct variable containing fields of type char or numeric
%
% filename can also be an URL containing XML

% Read file
if ~strcmp(filename(1:5), 'http:');
    [fid, message] = fopen(filename,'r');
    if fid == -1; error(message); end
    xml = fread(fid, 'uint8=>char');
    fclose(fid);
else
    filename = strrep(filename, '\', '/');
    xml = urlread(filename);
end

% Remove 'new line' characters from the chain
xml = char(xml(:)');
xml = strrep(xml, char(10), '');
xml = strrep(xml, char(13), '');
% xml = strrep(xml, ':', ''); % also remove colon --> why?


% This is compatible Matlab 6.5
% first replace entries <tag/> by <tag></tag>
je = strfind(xml, '/>');
while ~isempty(je)
    jo = strfind(xml, '<');
    l = jo(max(find(jo < je(1))));
    tag = xml(l:(je(1)+1));
    tokOpen = tag(2:length(tag)-2);
    tokClose = get_tag_name(tag);
    xml = strrep(xml, char(tag), ...
        sprintf('<%s></%s>', char(tokOpen), char(tokClose)));
    je = strfind(xml, '/>');
end

xml = strrep(xml, '< ', '<');
xml = strrep(xml, ' >', '>');

% Remove all comments
cI = strfind(xml, '<!');
closeI = strfind(xml, '>');
toRemove = [];
for i_c = 1:length(cI)
    % find closing >
    indClosing = find(closeI(closeI > cI), 1);
    assert(~isempty(indClosing), 'Could not find closing > for comment!');
    
    toRemove = cat(2, toRemove, cI:closeI(indClosing));
end
xml(toRemove) = [];


% Parse the xml header and the rest of the file.
v = parse_xml_header(xml);

% If the top (and only) field is 'document', just strip it off
fNames = fieldnames(v);
if length(fNames) == 1 && strcmp(fNames{1}, 'document')
    v = v.document;
end

% convert to numeric values (if available)
v = struct2numeric(v);

 