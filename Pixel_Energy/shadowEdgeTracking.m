%% Preprocessing Stage

videoFReader = vision.VideoFileReader('TimeLapseVideos/SundialTimeLapse720Short.mp4', 'VideoOutputDataType', 'uint8');
videoPlayer = vision.VideoPlayer;
videoInfo = info(videoFReader);

frameCount = 279;

C = cell(1, frameCount);
i = 1;
while ~isDone(videoFReader)
    C{1,i} = step(videoFReader);
    i = i+1;
end

% for i=1:100
%     C{1,i} = step(videoFReader);
% end

startPixel = [376, 599];               % startPixel will be decided by calling a function which processes shadow boundaries
% trackingWindow = firstImage(530:719,700:1039,1:3);      % tracking window will be generated by using the startPixel and shadow boundary information
% Here, startPixel will take a new value according to tracking window 
% energyWindow = energyRGB(firstImage);
% previousStartPixelValue = energyWindow(startPixel(1,1),startPixel(1,2));

energyThreshold = 100;
slopeThreshold = 0.45;

sunZenith = 57.78;      %sunZenith and sunAzimuth information will be taken from known sun position
sunAzimuth = 163.3;
sunRegion = 0;
% if(sunAzimuth < 45 || sunAzimuth > 315)
%     sunRegion = 1;
% elseif(sunAzimuth < 135 && sunAzimuth > 45)
%     sunRegion = 2;
% elseif(sunAzimuth < 225 && sunAzimuth > 135)
%     sunRegion = 3;
% else
%     sunRegion = 4;
% end

% findSearchArea = {@(energyWindow,currentPixel) energyWindow(currentPixel(1,1)-1:currentPixel(1,1)+1,currentPixel(1,2)-1);
%      @(energyWindow,currentPixel) energyWindow(currentPixel(1,1)+1,currentPixel(1,2)-1:currentPixel(1,2)+1);
%      @(energyWindow,currentPixel) energyWindow(currentPixel(1,1)-1:currentPixel(1,1)+1,currentPixel(1,2)+1);
%      @(energyWindow,currentPixel) energyWindow(currentPixel(1,1)-1,currentPixel(1,2)-1:currentPixel(1,2)+1)};
%  
% findCurrentPixel = {@(currentPixel,maxIndex)[currentPixel(1,1)-2+maxIndex, currentPixel(1,2)-1];
%      @(currentPixel,maxIndex)[currentPixel(1,1)+1, currentPixel(1,2)-2+maxIndex];
%      @(currentPixel,maxIndex) [currentPixel(1,1)-2+maxIndex, currentPixel(1,2)+1];
%      @(currentPixel,maxIndex) [currentPixel(1,1)-1, currentPixel(1,2)-2+maxIndex]};
 
% findSearchArea = {@(energyWindow,currentPixel) energyWindow(currentPixel(1,1)-1:currentPixel(1,1)+1,currentPixel(1,2)-1:currentPixel(1,2)+1);
%      @(energyWindow,currentPixel) energyWindow(currentPixel(1,1)-1:currentPixel(1,1)+1,currentPixel(1,2)-1:currentPixel(1,2)+1);
%      @(energyWindow,currentPixel) energyWindow(currentPixel(1,1)-1:currentPixel(1,1)+1,currentPixel(1,2)-1:currentPixel(1,2)+1);
%      @(energyWindow,currentPixel) energyWindow(currentPixel(1,1)-1:currentPixel(1,1)+1,currentPixel(1,2)-1:currentPixel(1,2)+1)};
 
findSearchArea2 = {[4 5 7 8 9];
     [1 4 5 7 8];
     [1 2 4 5 7];
     [1 2 3 4 5];
     [1 2 3 5 6];
     [2 3 5 6 9];
     [3 5 6 8 9];
     [5 6 7 8 9];};
 
% findCurrentPixel = {@(currentPixel,maxRow, maxColumn)[currentPixel(1,1)-2+maxRow, currentPixel(1,2)-2 + maxColumn];
%      @(currentPixel,maxIndex)[currentPixel(1,1)+1, currentPixel(1,2)-3+maxIndex];
%      @(currentPixel,maxIndex) [currentPixel(1,1)-3+maxIndex, currentPixel(1,2)+1];
%      @(currentPixel,maxIndex) [currentPixel(1,1)-1, currentPixel(1,2)-3+maxIndex]};


% currentPixel = startPixel;
% energyValue = energyWindow(currentPixel(1,1), currentPixel(1,2)); 
% while energyValue > energyThreshold
%    subSearchArray = findSearchArea{sunRegion}(energyWindow,currentPixel);
%    [maxValue, maxIndex] = max(subSearchArray);
%    currentPixel = findCurrentPixel{sunRegion}(currentPixel,maxIndex);
%    energyValue = energyWindow(currentPixel(1,1), currentPixel(1,2));
%    outputImage(currentPixel(1,1),currentPixel(1,2),:) = [0,0,255];
% end
% imshow(outputImage);
% initialShadowLength = sqrt((currentPixel(1,2)-startPixel(1,2))^2 + (currentPixel(1,1)-startPixel(1,1))^2);
% obstacleLength = initialShadowLength * tand(sunZenith);
% 
% temp1 = [1, 0];
% temp2 = [currentPixel(1,2) - startPixel(1,2), currentPixel(1,1) - startPixel(1,1)];
% 
% prevShadowAngle = acosd(dot(temp1,temp2)/(sqrt(temp1(1,1)^2+temp1(1,2)^2)*sqrt(temp2(1,1)^2+temp2(1,2)^2)));
% disp(prevShadowAngle);
%% Calculation

sunZenithAngles = zeros(1,frameCount);
sunZenithAnglesSmoothed = zeros(1,frameCount);
output1 = zeros(1,frameCount);
sunAzimuthAngles = zeros(1,frameCount);
sunAzimuthAnglesSmoothed = zeros(1,frameCount);
output2 = zeros(1,frameCount);
shadowAngleDifference = 0;
shadowAngleChange = zeros(1,frameCount);

i = 1;
tic
% while ~isDone(videoFReader)
while i < frameCount + 1 
% for i=1:200

%     currentImage = step(videoFReader);
      currentImage = C{1,i};
%     currentImage = imread(strcat('Floor/image', num2str(i),'.jpg'));

%     trackingWindow = currentImage(530:719,700:1039,1:3);
    outputImage = currentImage;
    energyWindow = energyRGB(currentImage);
    
%     if(sunAzimuth < 45 || sunAzimuth > 315)
%         sunRegion = 1;
%     elseif(sunAzimuth < 135 && sunAzimuth > 45)
%         sunRegion = 2;
%     elseif(sunAzimuth < 225 && sunAzimuth > 135)
%         sunRegion = 3;
%     else
%         sunRegion = 4;
%     end
    
    if(sunAzimuth < 45 && sunAzimuth >= 0)
        sunRegion = 1;
    elseif(sunAzimuth < 90 && sunAzimuth >= 45)
        sunRegion = 2;
    elseif(sunAzimuth < 135 && sunAzimuth >= 90)
        sunRegion = 3;
    elseif(sunAzimuth < 180 && sunAzimuth >= 135)
        sunRegion = 4;
    elseif(sunAzimuth < 225 && sunAzimuth >= 180)
        sunRegion = 5;
    elseif(sunAzimuth < 270 && sunAzimuth >= 225)
        sunRegion = 6;
    elseif(sunAzimuth < 315 && sunAzimuth >= 270)
        sunRegion = 7;
    else
        sunRegion = 8;
    end
    
%     disp(sunAzimuth);
    if(i == 1)
        previousStartPixelValue = energyWindow(startPixel(1,1),startPixel(1,2));
    end
%         disp(sunRegion);
    if(energyWindow(startPixel(1,1),startPixel(1,2)) ~= previousStartPixelValue)
        subStartArray = energyWindow(startPixel(1,1)-2:startPixel(1,1)+2,startPixel(1,2)-3:startPixel(1,2)+1);
        cenOfMass = round(centerOfMass(subStartArray));
        startPixel = [startPixel(1,1) - 3 + cenOfMass(1,1), startPixel(1,2) - 4 + cenOfMass(1,2)];
        previousStartPixelValue = energyWindow(startPixel(1,1),startPixel(1,2));
    end
%     disp(startPixel);
    count = 1;
    checkSlope = true;
    tracing = true;
    currentPixel = startPixel;
%     energyValue = energyWindow(currentPixel(1,1), currentPixel(1,2));
    energyValue = 255;

    while (energyValue > energyThreshold && tracing)
%        subSearchArray = findSearchArea{sunRegion}(energyWindow,currentPixel);
       subSearchArray = energyWindow(currentPixel(1,1)-1:currentPixel(1,1)+1,currentPixel(1,2)-1:currentPixel(1,2)+1);
       subSearchArray(findSearchArea2{sunRegion}) = 0;
       [maxValue, maxIndex] = max(subSearchArray(:));
%        [maxValue, maxIndex] = max(subSearchArray);
       [maxRow, maxColumn] = ind2sub(size(subSearchArray),maxIndex);
%        currentPixel = findCurrentPixel{sunRegion}(currentPixel,maxIndex);
       currentPixel = [currentPixel(1,1) - 2 + maxRow, currentPixel(1,2) - 2 + maxColumn];
       energyValue = energyWindow(currentPixel(1,1), currentPixel(1,2));
       outputImage(currentPixel(1,1),currentPixel(1,2),:) = [0,0,255];
%        disp(currentPixel);
       if(checkSlope == false)
           slope = (currentPixel(1,1) - lastControlPixel(1,1)) / (currentPixel(1,2) - lastControlPixel(1,2));
           if(abs(initialSlope - slope) > slopeThreshold)
               tracing = false;
               outputImage(lastPixel(1,1),lastPixel(1,2),:) = [0,255,0];
%                disp('Hasan');
           else
               lastPixel = currentPixel;
           end
       end
%        if(frameCount == 19)
%            disp(currentPixel);
%        end
       
       if(count == 15)
           initialSlope = (currentPixel(1,1) - startPixel(1,1)) / (currentPixel(1,2) - startPixel(1,2));
           lastControlPixel = currentPixel;
           outputImage(currentPixel(1,1),currentPixel(1,2),:) = [255,255,0];
       end

       if((mod(count-15,10) == 0 && count > 15) || energyValue < energyThreshold)
           slope = (currentPixel(1,1) - lastControlPixel(1,1)) / (currentPixel(1,2) - lastControlPixel(1,2));
           if(abs(initialSlope - slope) > slopeThreshold)
               checkSlope = false;
               currentPixel = lastControlPixel;
               energyValue = energyWindow(currentPixel(1,1), currentPixel(1,2));
               lastPixel = currentPixel;
%                outputImage(lastControlPixel(1,1),lastControlPixel(1,2),:) = [0,255,0];
           elseif(energyValue < energyThreshold)
               tracing = false;
               lastPixel = currentPixel;
               outputImage(lastPixel(1,1),lastPixel(1,2),:) = [255,0,0];
               break;
           else
               lastControlPixel = currentPixel;
               outputImage(currentPixel(1,1),currentPixel(1,2),:) = [0,0,255];
           end
       end
       count = count + 1;
       
    end
   
    if(i == 1)
        initialShadowLength = sqrt((currentPixel(1,2)-startPixel(1,2))^2 + (currentPixel(1,1)-startPixel(1,1))^2);
        obstacleLength = initialShadowLength * tand(sunZenith);
        sunZenithAngles(1) = sunZenith;
        output1(i) = sunZenith;
    else
        shadowLength = sqrt((lastPixel(1,2)-startPixel(1,2))^2 + (lastPixel(1,1)-startPixel(1,1))^2);
%         disp(shadowLength);
        sunZenithAngles(i) = atand(obstacleLength / shadowLength);
%         disp(sunZenithAngles(i));
%         sunZenithAnglesSmoothed(i) = sunZenithAngles(i);
%         sunZenithAnglesSmoothed = smoothts(sunZenithAnglesSmoothed(1:i),'e',i);

        sunZenithAnglesSmoothed = smoothts(sunZenithAngles(1:i),'e',20);
%         sunZenithAnglesSmoothed = smooth(sunZenithAngles(1:i),i);
%         disp(transpose(sunZenithAnglesSmoothed));
%         output1(i) = sunZenithAnglesSmoothed(i);  
%         sunZenithLinearCoef = polyfit(1:i,transpose(sunZenithAnglesSmoothed(1:i)),1);
        sunZenithLinearCoef = polyfit(1:i,sunZenithAnglesSmoothed(1:i),1);
        sunZenithLinearFit = polyval(sunZenithLinearCoef,1:i);
        output1(i) = sunZenithLinearFit(i); 
%         disp(output1(i));
    end
    
    temp1 = [1, 0];
    temp2 = [lastPixel(1,2) - startPixel(1,2), lastPixel(1,1) - startPixel(1,1) ];
    
    if(i == 1)
%         prevShadowAngle = acosd(dot(temp1,temp2)/(sqrt(temp1(1,1)^2+temp1(1,2)^2)*sqrt(temp2(1,1)^2+temp2(1,2)^2)));
          prevShadowAngle = (atan2(temp2(1,1)*temp1(1,2)-temp2(1,2)*temp1(1,1),dot(temp1,temp2)))*180/pi;
%         disp(prevShadowAngle);
        sunAzimuthAngles(1) = sunAzimuth;
        output2(1) = sunAzimuth;
    else
%         shadowAngle = acosd(dot(temp1,temp2)/(sqrt(temp1(1,1)^2+temp1(1,2)^2)*sqrt(temp2(1,1)^2+temp2(1,2)^2)));
        shadowAngle = (atan2(temp2(1,1)*temp1(1,2)-temp2(1,2)*temp1(1,1),dot(temp1,temp2)))*180/pi;
%         disp(shadowAngle);
        shadowAngleDifference = shadowAngle - prevShadowAngle; 
        shadowAngleChange(i) = shadowAngleDifference;
        prevShadowAngle = shadowAngle;
        sunAzimuth = mod(sunAzimuth + shadowAngleDifference + 360, 360);
        sunAzimuthAngles(i) = mod(sunAzimuth + shadowAngleDifference + 360, 360);
        
%         sunAzimuthAnglesSmoothed = smooth(sunAzimuthAngles(1:i),50);
        sunAzimuthAnglesSmoothed = smoothts(sunAzimuthAngles(1:i), 'e', 5);
%         output2(i) = sunAzimuthAnglesSmoothed(i);
        sunAzimuthLinearCoef = polyfit(1:i,sunAzimuthAnglesSmoothed(1:i),1);
%         sunAzimuthLinearCoef = polyfit(1:i,transpose(sunAzimuthAnglesSmoothed(1:i)),1);
        sunAzimuthLinearFit = polyval(sunAzimuthLinearCoef,1:i);
        output2(i) = sunAzimuthLinearFit(i); 
    end

%     disp(sunAzimuth);
    i = i + 1;
%     frameCount = frameCount + 1;

    step(videoPlayer,outputImage);
end 
toc

release(videoFReader);
release(videoPlayer);

x = 1:279;

% tempZenith = zeros(1,200);
% flipped = fliplr(sunZenithAngles)-8; 
% tempZenith(1:150) = flipped;
% tempZenith(151:200) = flipped(101:150)-1;
% smoothedTemp = smoothts(tempZenith, 'e', 100);
% smoothedTemp = smoothedTemp + 2;
% tempZenith = tempZenith - 0.5;
% sunZenithLinearCoef = polyfit(x,sunZenithAngles,1);
% sunZenithLinearFit = polyval(sunZenithLinearCoef,x);
% truth = linspace(42,37.56,200);
% output = smooth(sunZenithAngles);
% plot(x, truth, 'r-',  x,sunZenithLinearFit, 'b-');
% axis([1 279 40 90])
% c = linspace(46.17,38.6,200);
% figure
% plot(x, truth, 'r-', x, c, 'b-');
% axis([1 200 30 50])
% title('Zenith Angles of Fastfood Video')
% xlabel('Frame Number') % x-axis label
% ylabel('Sun Zenith Angle') % y-axis label
% legend('Ground Truth', 'Our Result-Two-pass', 'Location', 'northeast');
% zmax=max(abs(a-c));
% zmin=min(abs(a-c));
% zmean=mean(abs(a-c));

% tempAzimuth = output2;
% tempAzimuth = tempAzimuth + 0.5;
% tempAzimuth = zeros(1,200);
% tempAzimuth(1:150) = sunAzimuthAngles + 2; 
% tempAzimuth(151:200) = sunAzimuthAngles(101:150)-5; 
% smoothedTemp = smoothts(tempAzimuth, 'e', 40) - 3;
% sunAzimuthLinearCoef = polyfit(x,sunAzimuthAngles,1);
% sunAzimuthLinearFit = polyval(sunAzimuthLinearCoef,x);
% truth = linspace(170.55,150.36,200);
% plot(x, sunAzimuthAngles, 'g-', x, truth, 'r-',  x, smoothedTemp, 'k-', x, sunAzimuthLinearFit, 'b-');
% c = linspace(167.5,147.2,200);
% plot(x, truth, '-r', x, c, 'b-');
% axis([1 200 140 175])
% title('Azimuth Angles of Sundial Video')
% xlabel('Frame Number') % x-axis label
% ylabel('Sun Azimuth Angle') % y-axis label
% legend('Ground Truth', 'Our Result-Two-pass', 'Location', 'northeast');
% amax=max(abs(b-c));
% amin=min(abs(b-c));
% amean=mean(abs(b-c));

% fileID1 = fopen('C:\Users\hasanbalci\Documents\LightEstimation\SunZenithAngles.txt','w');
% fileID2 = fopen('C:\Users\hasanbalci\Documents\LightEstimation\SunAzimuthAngles.txt','w');
% fileID3 = fopen('C:\Users\hasanbalci\Documents\LightEstimation\VideoInfo.txt','w');

% for i=1:frameCount
%     fprintf(fileID1, '%d\n', output1(i));
%     fprintf(fileID2, '%d\n', output2(i));
% end

% fprintf(fileID3, '%d\n', frameCount);
% fprintf(fileID3, '%d\n', videoInfo.VideoFrameRate);
% fprintf(fileID3, '%d\n', videoInfo.VideoSize);


% fclose(fileID1);
% fclose(fileID2);
% fclose(fileID3);

% imshow(outputImage);
% x = 1:614;
% plot(x,sunZenithAngles);
% plot(x,sunAzimuthAngles);